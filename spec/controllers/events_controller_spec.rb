require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EventsController do

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.
  def valid_session
    {}
  end


  before(:each) do 
    @user = FactoryGirl.create(:user_with_events)
    @user.confirm!
    sign_in @user    
  end

  describe "get index" do
    it "lists users events" do
      get :index
      assigns(:events).should eq @user.events.limit(10)
    end

    it "renders index template" do
      get :index
      response.should render_template("index")
    end    
  end

  describe "get show" do
    it "shows an event" do
      get :show, {'id' => @user.events.first.id}
      assigns(:event).should eq @user.events.first
    end

    it "renders show template" do
      get :show, {'id' => @user.events.first.id}
      response.should render_template("show")
    end    
  end  

  describe "get new" do
    it "shows new event form" do
      get :new, {'recipient_id' => @user.recipients.first.id }
      assigns(:event).should be_a_new(Event)
    end

    it "renders new template" do
      get :new, {'recipient_id' => @user.recipients.first.id }
      response.should render_template("new")
    end    
  end  

  describe "post create" do
    it "creates a new event and redirects to event index" do
      event = FactoryGirl.build(:event, :recipient => @user.recipients.first)
      post :create, :event => {:month => event.event_time.month, :day => event.event_time.day, :recipient_id => event.recipient_id, 
                              :name => event.name, :reminder => event.reminder}
      assert_equal Event.unscoped.last.name, event.name
      assert_redirected_to events_path
    end    
  end

  describe "delete event" do
    it "delete event and redirect to root" do
      before_delete = Event.count
      delete :destroy, :id => @user.events.last
      assert_equal before_delete - 1, Event.count
      assert_redirected_to root_path
    end    
  end

end
