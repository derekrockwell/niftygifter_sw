require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RecipientsController do

  # This should return the minimal set of attributes required to create a valid
  # Recipient. As you add validations to Recipient, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipientsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before(:each) do 
    @user = FactoryGirl.create(:user_with_recipients)
    @user.confirm!
    sign_in @user    
  end

  describe "get index" do
    it "lists users recipients" do
      get :index
      assigns(:recipients).should eq @user.recipients
    end

    it "renders index template" do
      get :index
      response.should render_template("index")
    end    
  end

  describe "get show" do
    it "shows a recipient" do
      get :show, {'id' => @user.recipients.first.id}
      assigns(:recipient).should eq @user.recipients.first
    end

    it "renders show template" do
      get :show, {'id' => @user.recipients.first.id}
      response.should render_template("show")
    end    
  end  

  describe "get new" do
    it "shows new recipient form" do
      get :new
      assigns(:recipient).should be_a_new(Recipient)
    end

    it "renders new template" do
      get :new
      response.should render_template("new")
    end    
  end  

  describe "post create" do
    it "creates a new recipient and redirects to show page" do
      recipient = FactoryGirl.build(:recipient, :user => @user)
      post :create, :recipient => {:user_id => recipient.user_id, :alias => recipient.alias}
      assert_equal Recipient.last.alias, recipient.alias
      assert_redirected_to recipient_path(Recipient.last)
    end    
  end

  describe "delete recipient" do
    it "delete recipient and redirect to root" do
      before_delete = Recipient.count
      delete :destroy, :id => @user.recipients.last
      assert_equal before_delete - 1, Recipient.count
      assert_redirected_to root_path
    end    
  end

end
